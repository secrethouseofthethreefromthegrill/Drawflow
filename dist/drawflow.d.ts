import "./drawflow.css";
declare type EventCallback<Data = unknown> = (data: Data) => void;
declare type RegisterEventFunction<Event extends string = string, Data = unknown> = (event: Event, callback: EventCallback<Data>) => boolean;
declare type DispatchEventFunction<Event extends string = string, Data = unknown> = (event: Event, details: Data) => void;
declare type EventListener = {
    on: RegisterEventFunction;
    dispatch: DispatchEventFunction;
    removeListener: RegisterEventFunction;
};
export declare type RenderFunction = (options: {
    register: unknown;
    type: string | number;
    content: HTMLElement;
    editor: Drawflow;
    id: string;
    data: DrawflowNode;
    event: EventListener;
}) => void;
export declare type DrawflowData = {
    drawflow: Record<string, {
        data: Record<string, DrawflowNode>;
    }>;
};
export declare type DrawflowNodeData = {
    [key: string]: string | DrawflowNodeData;
};
export declare type DrawflowNode = {
    id: string;
    name: string;
    data: DrawflowNodeData;
    class: string;
    html: string;
    typenode: boolean | string | RenderFunction;
    inputs: Record<string, DrawflowNodeInput>;
    outputs: Record<string, DrawflowNodeOutput>;
    pos_x: number;
    pos_y: number;
};
export declare type DrawflowNodeInput = {
    connections: {
        node: string;
        input: string;
        points?: {
            pos_x: number;
            pos_y: number;
        }[];
    }[];
};
export declare type DrawflowNodeOutput = {
    connections: {
        node: string;
        output: string;
        points?: {
            pos_x: number;
            pos_y: number;
        }[];
    }[];
};
export declare type DrawflowPoint = {
    x: number;
    y: number;
};
export declare type DrawflowConnectionOut = {
    output_id: string;
    output_class: string;
};
export declare type DrawflowConnectionIn = {
    input_id: string;
    input_class: string;
};
export declare type DrawflowConnection = DrawflowConnectionIn & DrawflowConnectionOut;
declare type DrawflowOptions = {
    module?: string;
    editor_mode?: "edit" | "view" | "fixed";
    zoom?: number;
    zoom_max?: number;
    zoom_min?: number;
    zoom_value?: number;
    zoom_last_value?: number;
    curvature?: number;
    reroute?: boolean;
    reroute_fix_curvature?: boolean;
    reroute_curvature_start_end?: number;
    reroute_curvature?: number;
    reroute_width?: number;
    force_first_input?: boolean;
    draggable_inputs?: boolean;
    useuuid?: boolean;
    render?: RenderFunction;
};
export default class Drawflow {
    container: HTMLElement;
    private events;
    precanvas: HTMLElement;
    nodeId: number;
    private ele_selected;
    private node_selected;
    private drag;
    private drag_point;
    private editor_selected;
    private connection;
    private connection_ele;
    private connection_selected;
    canvas_x: number;
    canvas_y: number;
    private pos_x;
    private pos_x_start;
    private pos_y;
    private pos_y_start;
    private mouse_x;
    private mouse_y;
    private first_click;
    noderegister: Record<string, unknown>;
    drawflow: DrawflowData;
    module: string;
    editor_mode: "edit" | "view" | "fixed";
    zoom: number;
    zoom_max: number;
    zoom_min: number;
    zoom_value: number;
    zoom_last_value: number;
    curvature: number;
    reroute: boolean;
    reroute_fix_curvature: boolean;
    reroute_curvature_start_end: number;
    reroute_curvature: number;
    reroute_width: number;
    force_first_input: boolean;
    draggable_inputs: boolean;
    useuuid: boolean;
    render: RenderFunction;
    evCache: PointerEvent[];
    prevDiff: number;
    constructor(container: HTMLElement, options?: DrawflowOptions);
    get zoomLevel(): number;
    set zoomLevel(value: number);
    start(): void;
    private _handlePointerdown;
    private _handlePointermove;
    private _handlePointerup;
    private _removeEvent;
    private _handleInputStart;
    private _handleInputMove;
    private _handleInputEnd;
    private _handleContextmenu;
    private _handleKey;
    private _handleZoom;
    private _dblclick;
    refreshZoom(silent?: boolean): void;
    zoomIn(value?: number): void;
    zoomOut(value?: number): void;
    resetZoom(silent?: boolean): void;
    load(): void;
    deselectConnection(silent?: boolean): void;
    createCurvature(start_pos_x: number, start_pos_y: number, end_pos_x: number, end_pos_y: number, curvature: number): string;
    private _createConnection;
    private _drawConnectionTo;
    addConnection(id_output: string, id_input: string, output_class: string, input_class: string, silent?: boolean): void;
    updateConnection(connection: SVGElement, nodeFromElem?: HTMLElement, nodeToElem?: HTMLElement): void;
    updateNodeConnections(id: string): void;
    createReroutePoint(ele: SVGElement, silent?: boolean): void;
    removeReroutePoint(ele: SVGElement, silent?: boolean): void;
    registerNode(name: string | number, html: unknown): void;
    getNodeFromId(id: string): DrawflowNode;
    getNodesFromName(name: string): string[];
    addNode(name: string, num_in: number, num_out: number, ele_pos_x: number, ele_pos_y: number, classoverride: string, data: unknown, html: string, typenode?: boolean | "render" | RenderFunction, silent?: boolean): string;
    private _addNodeImport;
    private _addRerouteImport;
    changeNodeID(oldId: string, newId: string, silent?: boolean): boolean;
    updateNodeValue(event: Event, silent?: boolean): void;
    updateNodeDataFromId(id: string, data: DrawflowNodeData): void;
    addNodeInput(id: string): void;
    addNodeOutput(id: string): void;
    removeNodeInput(id: string, input_class: string, silent?: boolean): void;
    removeNodeOutput(id: string, output_class: string, silent?: boolean): void;
    removeNodeId(id: string, silent?: boolean): void;
    removeSelectedConnection(silent?: boolean): void;
    removeConnection(id_output: string, id_input: string, output_class: string, input_class: string, silent?: boolean): boolean;
    removeNodeConnectionsByNodeId(id: string, silent?: boolean): void;
    getModuleFromNodeId(id: number | string): string;
    addModule(name: string, silent?: boolean): void;
    changeModule(name: string, silent?: boolean): void;
    removeModule(name: string, silent?: boolean): void;
    clearSelectedModule(): void;
    clear(): void;
    export(silent?: boolean): DrawflowData;
    import(data: DrawflowData, silent?: boolean): void;
    on(event: "rerouteCreated", callback: (data: string) => void): boolean;
    on(event: "click", callback: (data: MouseEvent | TouchEvent) => void): boolean;
    on(event: "clickEnd", callback: (data: MouseEvent | TouchEvent) => void): boolean;
    on(event: "connectionCancel", callback: (data: true) => void): boolean;
    on(event: "connectionCreated", callback: (data: DrawflowConnection) => void): boolean;
    on(event: "connectionRemoved", callback: (data: DrawflowConnection) => void): boolean;
    on(event: "connectionSelected", callback: (data: DrawflowConnection) => void): boolean;
    on(event: "connectionStart", callback: (data: DrawflowConnectionOut) => void): boolean;
    on(event: "connectionDeselected", callback: (data: true) => void): boolean;
    on(event: "contextmenu", callback: (data: MouseEvent) => void): boolean;
    on(event: "export", callback: (data: DrawflowData) => void): boolean;
    on(event: "import", callback: (data: "import") => void): boolean;
    on(event: "keydown", callback: (data: KeyboardEvent) => void): boolean;
    on(event: "moduleChanged", callback: (data: string) => void): boolean;
    on(event: "moduleCreated", callback: (data: string) => void): boolean;
    on(event: "moduleRemoved", callback: (data: string) => void): boolean;
    on(event: "mouseMove", callback: (data: DrawflowPoint) => void): boolean;
    on(event: "mouseUp", callback: (data: MouseEvent | TouchEvent) => void): boolean;
    on(event: "nodeCreated", callback: (data: string) => void): boolean;
    on(event: "nodeDataChanged", callback: (data: string) => void): boolean;
    on(event: "nodeMoved", callback: (data: {
        id: string;
    } & DrawflowPoint) => void): boolean;
    on(event: "nodeRemoved", callback: (data: string) => void): boolean;
    on(event: "nodeSelected", callback: (data: string) => void): boolean;
    on(event: "nodeDeselected", callback: (data: true) => void): boolean;
    on(event: "rerouteRemoved", callback: (data: string) => void): boolean;
    on(event: "rerouteMoved", callback: (data: string) => void): boolean;
    on(event: "translate", callback: (data: DrawflowPoint) => void): boolean;
    on(event: "updateNodes", callback: (data: {
        id: string;
        data: unknown;
    }) => void): boolean;
    on(event: "updateNodeId", callback: (data: {
        newId: string;
        oldId: string;
    }) => void): boolean;
    on(event: "zoom", callback: (data: number) => void): boolean;
    on(event: string, callback: (data: unknown) => void): boolean;
    removeListener(event: "rerouteCreated", callback: (data: string) => void): boolean;
    removeListener(event: "click", callback: (data: MouseEvent | TouchEvent) => void): boolean;
    removeListener(event: "clickEnd", callback: (data: MouseEvent | TouchEvent) => void): boolean;
    removeListener(event: "connectionCancel", callback: (data: true) => void): boolean;
    removeListener(event: "connectionCreated", callback: (data: DrawflowConnection) => void): boolean;
    removeListener(event: "connectionRemoved", callback: (data: DrawflowConnection) => void): boolean;
    removeListener(event: "connectionSelected", callback: (data: DrawflowConnection) => void): boolean;
    removeListener(event: "connectionStart", callback: (data: DrawflowConnectionOut) => void): boolean;
    removeListener(event: "connectionDeselected", callback: (data: true) => void): boolean;
    removeListener(event: "contextmenu", callback: (data: MouseEvent) => void): boolean;
    removeListener(event: "export", callback: (data: DrawflowData) => void): boolean;
    removeListener(event: "import", callback: (data: "import") => void): boolean;
    removeListener(event: "keydown", callback: (data: KeyboardEvent) => void): boolean;
    removeListener(event: "moduleChanged", callback: (data: string) => void): boolean;
    removeListener(event: "moduleCreated", callback: (data: string) => void): boolean;
    removeListener(event: "moduleRemoved", callback: (data: string) => void): boolean;
    removeListener(event: "mouseMove", callback: (data: DrawflowPoint) => void): boolean;
    removeListener(event: "mouseUp", callback: (data: MouseEvent | TouchEvent) => void): boolean;
    removeListener(event: "nodeCreated", callback: (data: string) => void): boolean;
    removeListener(event: "nodeDataChanged", callback: (data: string) => void): boolean;
    removeListener(event: "nodeMoved", callback: (data: {
        id: string;
    } & DrawflowPoint) => void): boolean;
    removeListener(event: "nodeRemoved", callback: (data: string) => void): boolean;
    removeListener(event: "nodeSelected", callback: (data: string) => void): boolean;
    removeListener(event: "nodeDeselected", callback: (data: true) => void): boolean;
    removeListener(event: "rerouteRemoved", callback: (data: string) => void): boolean;
    removeListener(event: "rerouteMoved", callback: (data: string) => void): boolean;
    removeListener(event: "translate", callback: (data: DrawflowPoint) => void): boolean;
    removeListener(event: "updateNodes", callback: (data: {
        id: string;
        data: unknown;
    }) => void): boolean;
    removeListener(event: "updateNodeId", callback: (data: {
        newId: string;
        oldId: string;
    }) => void): boolean;
    removeListener(event: "zoom", callback: (data: number) => void): boolean;
    removeListener(event: string, callback: (data: unknown) => void): boolean;
    dispatch(event: "rerouteCreated", details: string): boolean;
    dispatch(event: "click", details: MouseEvent | TouchEvent): boolean;
    dispatch(event: "clickEnd", details: MouseEvent | TouchEvent): boolean;
    dispatch(event: "connectionCancel", details: true): boolean;
    dispatch(event: "connectionCreated", details: DrawflowConnection): boolean;
    dispatch(event: "connectionRemoved", details: DrawflowConnection): boolean;
    dispatch(event: "connectionSelected", details: DrawflowConnection): boolean;
    dispatch(event: "connectionStart", details: DrawflowConnectionOut): boolean;
    dispatch(event: "connectionDeselected", details: true): boolean;
    dispatch(event: "contextmenu", details: MouseEvent): boolean;
    dispatch(event: "export", details: DrawflowData): boolean;
    dispatch(event: "import", details: "import"): boolean;
    dispatch(event: "keydown", details: KeyboardEvent): boolean;
    dispatch(event: "moduleChanged", details: string): boolean;
    dispatch(event: "moduleCreated", details: string): boolean;
    dispatch(event: "moduleRemoved", details: string): boolean;
    dispatch(event: "mouseMove", details: DrawflowPoint): boolean;
    dispatch(event: "mouseUp", details: MouseEvent | TouchEvent): boolean;
    dispatch(event: "nodeCreated", details: string): boolean;
    dispatch(event: "nodeDataChanged", details: string): boolean;
    dispatch(event: "nodeMoved", details: {
        id: string;
    } & DrawflowPoint): boolean;
    dispatch(event: "nodeRemoved", details: string): boolean;
    dispatch(event: "nodeSelected", details: string): boolean;
    dispatch(event: "nodeDeselected", details: true): boolean;
    dispatch(event: "rerouteRemoved", details: string): boolean;
    dispatch(event: "rerouteMoved", details: string): boolean;
    dispatch(event: "translate", details: DrawflowPoint): boolean;
    dispatch(event: "updateNodes", details: {
        id: string;
        data: unknown;
    }): boolean;
    dispatch(event: "updateNodeId", details: {
        oldId: string;
        newId: string;
    }): boolean;
    dispatch(event: "zoom", details: number): boolean;
    dispatch(event: string, details: unknown): boolean;
    private getUuid;
}
export {};
//# sourceMappingURL=drawflow.d.ts.map